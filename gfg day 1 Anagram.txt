Print Anagrams Together


Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.

Note: The final output will be in lexicographic order.

Examples:

Input: arr[] = ["act", "god", "cat", "dog", "tac"]
Output: [["act", "cat", "tac"], ["god", "dog"]]
Explanation: There are 2 groups of anagrams "god", "dog" make group 1. "act", "cat", "tac" make group 2.


Input: arr[] = ["no", "on", "is"]
Output: [["is"], ["no", "on"]]
Explanation: There are 2 groups of anagrams "is" makes group 1. "no", "on" make group 2.

Input: arr[] = ["listen", "silent", "enlist", "abc", "cab", "bac", "rat", "tar", "art"]
Output: [["abc", "cab", "bac"], ["listen", "silent", "enlist"], ["rat", "tar", "art"]]
Explanation: 
Group 1: "abc", "bac", and "cab" are anagrams.
Group 2: "listen", "silent", and "enlist" are anagrams.
Group 3: "rat", "tar", and "art" are anagrams.


Constraints:
1<= arr.size() <=100
1<= arr[i].size() <=10

Company Tags
Morgan Stanley  Amazon  Microsoft Snapdeal   D-E-Shaw   Goldman Sachs


Solutions :

class Solution:

    def anagrams(self, arr):
       
        
        anagram_groups = []
        seen = {}  # Dictionary to store sorted strings as keys and their anagrams as values

        for word in arr:
            sorted_word = "".join(sorted(word))  # Sort the word to create a unique key for anagrams
            if sorted_word in seen:
              seen[sorted_word].append(word)  # If the sorted word is already a key, append the current word
            else:
              seen[sorted_word] = [word]       # Otherwise, create a new entry in the dictionary

                 # Collect the anagram groups in the correct order
        for sorted_word in seen:
           anagram_groups.append(seen[sorted_word])

        return anagram_groups



