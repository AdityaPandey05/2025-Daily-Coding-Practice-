Given an unsorted array of integers, find the number of continuous subarrays having sum exactly equal to a given number k.

Examples:

Input: arr = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.


Input: arr = [9, 4, 20, 3, 10, 5], k = 33
Output: 2
Explaination: Subarrays: arr[0...2], arr[2...4] have sum exactly equal to 33.


Input: arr = [1, 3, 5], k = 0
Output: 0
Explaination: No subarray with 0 sum.

Constraints:

1 ≤ arr.size() ≤ 105
-103 ≤ arr[i] ≤ 103
-107 ≤ k ≤ 107


Company Tags
Microsoft



Solution :---------


class Solution:
    def countSubarrays(self, arr, k):
        freq={0:1}
        preSum=0
        ans=0
        for item in arr:
           preSum+=item
           ans+=freq.get(preSum-k,0)
           freq[preSum]=freq.get(preSum,0)+1
        return ans







Logic explanation :----


Example with arr = [1, 2, 3] and k = 3:

Start: preSum = 0, freq = {0: 1}, ans = 0
item = 1: preSum = 1, preSum - k = -2, freq.get(-2, 0) = 0, ans = 0, freq = {0: 1, 1: 1}
item = 2: preSum = 3, preSum - k = 0, freq.get(0, 0) = 1, ans = 1, freq = {0: 1, 1: 1, 3: 1}
item = 3: preSum = 6, preSum - k = 3, freq.get(3, 0) = 1, ans = 2, freq = {0: 1, 1: 1, 3: 1, 6: 1}
The function returns 2 because there are two subarrays with a sum of 3: [1, 2] and [3].

